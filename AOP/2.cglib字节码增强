- 没有接口，只有实现类
- 采用字节码增强框架 cglib，在运行时，创建目标列的子类，从而对目标类进行增强。
- 导入jar包
> 核心：cglib  依赖：asm  spring-core.jar 已经整合以上两个内容 

- 目标类
>
```java
public class UserServiceImpl{

    public void addUser() {
        System.out.println("addUser");
    }


    public void updateUser() {
        System.out.println("updateUser");
    }


    public void deleteUser() {
        System.out.println("deleteUser");
    }
}

```
- 切面类
>
```java
public class Aspect {
    public void before(){
        System.out.println("头头儿");
    }
    public void after(){
        System.out.println("尾尾儿");
    }
}

```
- 工厂类
>
```java
public class BeanFactory {
    public  static UserServiceImpl createService(){
        //1.目标类
      final   UserServiceImpl userService =new UserServiceImpl();
        //2.切面类
      final Aspect aspect=new Aspect();
        //3.代理类
        //3.1核心类
        Enhancer enhancer=new Enhancer();
        //3.2确定父类
        enhancer.setSuperclass(userService.getClass());
        /*
          3.3设置回调函数，MethodInterceptor 等效 invoke接口
          参数1，参数2，参数3与invoke一样
           参数4：方法的代理
         */
        enhancer.setCallback(new MethodInterceptor() {
            @Override
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                aspect.before();
                //目标类方法
                Object obj=method.invoke(userService,objects);
                //执行代理类的父类，执行目标类（目标类和代理类是父子关系）
                methodProxy.invokeSuper(o,objects);
                aspect.after();
                return obj;
            }
        });
        //3.4创建代理
        UserServiceImpl proService=(UserServiceImpl) enhancer.create();
        return  proService;
    }
```
- 测试类
>
```java

public class Test {
    public static void demo1(){
        UserServiceImpl userService= BeanFactory.createService();
        userService.addUser();
        userService.updateUser();
        userService.deleteUser();
    }

    public static void main(String[] args) {
        demo1();
    }
}
```
